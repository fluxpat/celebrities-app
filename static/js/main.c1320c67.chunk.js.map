{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","useState","celebs","slice","contacts","setContacts","className","colspan","Button","variant","onClick","addContact","random","Math","floor","length","find","el","id","newContacts","console","log","sort","a","b","name","popularity","reverse","TransitionGroup","component","map","contact","CSSTransition","key","timeout","classNames","src","pictureUrl","alt","height","toFixed","celeb","index","indexOf","splice","deleteContact","class","width","viewBox","fill","xmlns","d","fill-rule","clip-rule","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c1320c67.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport celebs from './contacts.json'\n\nimport Button from 'react-bootstrap/Button'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst App = () => {\n\n  const [contacts, setContacts] = useState(celebs.slice(0, 5))\n\n  const addContact = () => {\n    let random = celebs[Math.floor(Math.random() * celebs.length)]\n    if (contacts.length < celebs.length) {\n      if (contacts.find(el => el.id === random.id)) {\n        // console.log(random, \": celeb already exists\")\n        addContact()\n      } else {\n        let newContacts = [random, ...contacts]\n        setContacts(newContacts)\n      }\n    } else { console.log(\"Celebrity database exhausted\") }\n  }\n\n  const sortByName = () => {\n    contacts.sort((a, b) => {\n      if (a.name < b.name) return -1\n      else return 1\n    })\n    let newContacts = [...contacts]\n    setContacts(newContacts)\n  }\n\n  const sortByPop = () => {\n    contacts.sort((a, b) => a.popularity - b.popularity).reverse()\n    let newContacts = [...contacts]\n    setContacts(newContacts)\n  }\n\n  const deleteContact = (contact) => {\n    let celeb = contacts.find(el => el.id === contact.id)\n    let index = contacts.indexOf(celeb)\n    contacts.splice(index, 1)\n    let newContacts = [...contacts]\n    setContacts(newContacts)\n  }\n\n  return (\n    <div className=\"App\" >\n      <table className=\"table-content\">\n        <thead>\n          <tr>\n            <th colspan=\"4\" className=\"title\">Celebrities Tracker</th>\n          </tr>\n          <tr className=\"control-row\">\n            <td><Button variant=\"primary\" onClick={addContact}>Add Random Celebrity</Button></td>\n            <td><Button variant=\"success\" onClick={sortByName}>Sort By Name</Button></td>\n            <td><Button variant=\"success\" onClick={sortByPop}>Sort By Popularity</Button></td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Profile</td>\n            <td>Name</td>\n            <td>Popularity</td>\n          </tr>\n          <TransitionGroup component={null}>\n            {contacts.map(contact => {\n              return (\n                <CSSTransition key={contact.id} timeout={500} classNames=\"celebrity\">\n                  <tr className=\"celebrity-row\">\n                    <td><img className=\"celebrity-image\" src={contact.pictureUrl} alt={contact.name} height=\"100px\" /></td>\n                    <td className=\"celebrity-name\">{contact.name}</td>\n                    <td>{contact.popularity.toFixed(2)}</td>\n                    <td className=\"delete-button\"><Button variant=\"light\" onClick={() => deleteContact(contact)}><svg class=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M5.5 5.5A.5.5 0 016 6v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm2.5 0a.5.5 0 01.5.5v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm3 .5a.5.5 0 00-1 0v6a.5.5 0 001 0V6z\" />\n                      <path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 01-1 1H13v9a2 2 0 01-2 2H5a2 2 0 01-2-2V4h-.5a1 1 0 01-1-1V2a1 1 0 011-1H6a1 1 0 011-1h2a1 1 0 011 1h3.5a1 1 0 011 1v1zM4.118 4L4 4.059V13a1 1 0 001 1h6a1 1 0 001-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" clip-rule=\"evenodd\" />\n                    </svg></Button></td>\n                  </tr>\n                </CSSTransition>\n              )\n            })}\n          </TransitionGroup>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}